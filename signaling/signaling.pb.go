// Code generated by protoc-gen-go.
// source: signaling.proto
// DO NOT EDIT!

/*
Package signaling is a generated protocol buffer package.

It is generated from these files:
	signaling.proto

It has these top-level messages:
	Result
	SdpOffer
	SdpAnswer
	Empty
*/
package signaling

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Result_Status int32

const (
	Result_OK     Result_Status = 0
	Result_FAILED Result_Status = 1
)

var Result_Status_name = map[int32]string{
	0: "OK",
	1: "FAILED",
}
var Result_Status_value = map[string]int32{
	"OK":     0,
	"FAILED": 1,
}

func (x Result_Status) String() string {
	return proto.EnumName(Result_Status_name, int32(x))
}
func (Result_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Result struct {
	Message string        `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Status  Result_Status `protobuf:"varint,2,opt,name=status,enum=signaling.Result_Status" json:"status,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Result) GetStatus() Result_Status {
	if m != nil {
		return m.Status
	}
	return Result_OK
}

type SdpOffer struct {
	Sdp string `protobuf:"bytes,1,opt,name=sdp" json:"sdp,omitempty"`
}

func (m *SdpOffer) Reset()                    { *m = SdpOffer{} }
func (m *SdpOffer) String() string            { return proto.CompactTextString(m) }
func (*SdpOffer) ProtoMessage()               {}
func (*SdpOffer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SdpOffer) GetSdp() string {
	if m != nil {
		return m.Sdp
	}
	return ""
}

type SdpAnswer struct {
	Sdp string `protobuf:"bytes,1,opt,name=sdp" json:"sdp,omitempty"`
}

func (m *SdpAnswer) Reset()                    { *m = SdpAnswer{} }
func (m *SdpAnswer) String() string            { return proto.CompactTextString(m) }
func (*SdpAnswer) ProtoMessage()               {}
func (*SdpAnswer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SdpAnswer) GetSdp() string {
	if m != nil {
		return m.Sdp
	}
	return ""
}

type Empty struct {
	Block bool `protobuf:"varint,1,opt,name=block" json:"block,omitempty"`
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Empty) GetBlock() bool {
	if m != nil {
		return m.Block
	}
	return false
}

func init() {
	proto.RegisterType((*Result)(nil), "signaling.Result")
	proto.RegisterType((*SdpOffer)(nil), "signaling.SdpOffer")
	proto.RegisterType((*SdpAnswer)(nil), "signaling.SdpAnswer")
	proto.RegisterType((*Empty)(nil), "signaling.Empty")
	proto.RegisterEnum("signaling.Result_Status", Result_Status_name, Result_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Signaling service

type SignalingClient interface {
	Start(ctx context.Context, in *SdpOffer, opts ...grpc.CallOption) (Signaling_StartClient, error)
	Wait(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Signaling_WaitClient, error)
	Join(ctx context.Context, in *SdpAnswer, opts ...grpc.CallOption) (*Empty, error)
}

type signalingClient struct {
	cc *grpc.ClientConn
}

func NewSignalingClient(cc *grpc.ClientConn) SignalingClient {
	return &signalingClient{cc}
}

func (c *signalingClient) Start(ctx context.Context, in *SdpOffer, opts ...grpc.CallOption) (Signaling_StartClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Signaling_serviceDesc.Streams[0], c.cc, "/signaling.Signaling/Start", opts...)
	if err != nil {
		return nil, err
	}
	x := &signalingStartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Signaling_StartClient interface {
	Recv() (*SdpAnswer, error)
	grpc.ClientStream
}

type signalingStartClient struct {
	grpc.ClientStream
}

func (x *signalingStartClient) Recv() (*SdpAnswer, error) {
	m := new(SdpAnswer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *signalingClient) Wait(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Signaling_WaitClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Signaling_serviceDesc.Streams[1], c.cc, "/signaling.Signaling/Wait", opts...)
	if err != nil {
		return nil, err
	}
	x := &signalingWaitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Signaling_WaitClient interface {
	Recv() (*SdpOffer, error)
	grpc.ClientStream
}

type signalingWaitClient struct {
	grpc.ClientStream
}

func (x *signalingWaitClient) Recv() (*SdpOffer, error) {
	m := new(SdpOffer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *signalingClient) Join(ctx context.Context, in *SdpAnswer, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/signaling.Signaling/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Signaling service

type SignalingServer interface {
	Start(*SdpOffer, Signaling_StartServer) error
	Wait(*Empty, Signaling_WaitServer) error
	Join(context.Context, *SdpAnswer) (*Empty, error)
}

func RegisterSignalingServer(s *grpc.Server, srv SignalingServer) {
	s.RegisterService(&_Signaling_serviceDesc, srv)
}

func _Signaling_Start_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SdpOffer)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SignalingServer).Start(m, &signalingStartServer{stream})
}

type Signaling_StartServer interface {
	Send(*SdpAnswer) error
	grpc.ServerStream
}

type signalingStartServer struct {
	grpc.ServerStream
}

func (x *signalingStartServer) Send(m *SdpAnswer) error {
	return x.ServerStream.SendMsg(m)
}

func _Signaling_Wait_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SignalingServer).Wait(m, &signalingWaitServer{stream})
}

type Signaling_WaitServer interface {
	Send(*SdpOffer) error
	grpc.ServerStream
}

type signalingWaitServer struct {
	grpc.ServerStream
}

func (x *signalingWaitServer) Send(m *SdpOffer) error {
	return x.ServerStream.SendMsg(m)
}

func _Signaling_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdpAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalingServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signaling.Signaling/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalingServer).Join(ctx, req.(*SdpAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

var _Signaling_serviceDesc = grpc.ServiceDesc{
	ServiceName: "signaling.Signaling",
	HandlerType: (*SignalingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Signaling_Join_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Start",
			Handler:       _Signaling_Start_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Wait",
			Handler:       _Signaling_Wait_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "signaling.proto",
}

func init() { proto.RegisterFile("signaling.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xb3, 0xb5, 0x59, 0x9b, 0x39, 0x68, 0x18, 0x7b, 0x08, 0xa1, 0x42, 0xd9, 0x53, 0x4f,
	0x21, 0x56, 0xf0, 0x5e, 0xb0, 0x82, 0x7f, 0xa0, 0x90, 0x3d, 0x78, 0xde, 0x9a, 0x34, 0x04, 0xd3,
	0x64, 0xc9, 0x4e, 0x11, 0xbf, 0x91, 0x1f, 0x53, 0xdc, 0x6d, 0xb4, 0x62, 0xbd, 0xed, 0xbc, 0x37,
	0xf3, 0x7e, 0x0f, 0x16, 0xce, 0x4d, 0x55, 0x36, 0xaa, 0xae, 0x9a, 0x32, 0xd1, 0x5d, 0x4b, 0x2d,
	0x06, 0xdf, 0x82, 0xe8, 0x80, 0x67, 0x85, 0xd9, 0xd5, 0x84, 0x11, 0x9c, 0x6e, 0x0b, 0x63, 0x54,
	0x59, 0x44, 0x6c, 0xca, 0x66, 0x41, 0xd6, 0x8f, 0x98, 0x02, 0x37, 0xa4, 0x68, 0x67, 0xa2, 0xc1,
	0x94, 0xcd, 0xce, 0xe6, 0x51, 0xf2, 0x13, 0xe8, 0x8e, 0x13, 0x69, 0xfd, 0x6c, 0xbf, 0x27, 0x26,
	0xc0, 0x9d, 0x82, 0x1c, 0x06, 0xab, 0xc7, 0xd0, 0x43, 0x00, 0x7e, 0xb7, 0xb8, 0x7f, 0x5a, 0xde,
	0x86, 0x4c, 0x4c, 0x60, 0x24, 0x73, 0xbd, 0xda, 0x6c, 0x8a, 0x0e, 0x43, 0x38, 0x31, 0xb9, 0xde,
	0x13, 0xbf, 0x9e, 0xe2, 0x12, 0x02, 0x99, 0xeb, 0x45, 0x63, 0xde, 0xfe, 0xb1, 0xfd, 0xe5, 0x56,
	0xd3, 0x3b, 0x8e, 0xc1, 0x5f, 0xd7, 0xed, 0xcb, 0xab, 0x35, 0x47, 0x99, 0x1b, 0xe6, 0x1f, 0x0c,
	0x02, 0xd9, 0xb7, 0xc3, 0x1b, 0xf0, 0x25, 0xa9, 0x8e, 0xf0, 0xe2, 0xa0, 0x72, 0xcf, 0x8e, 0xc7,
	0xbf, 0x45, 0x87, 0x14, 0x5e, 0xca, 0xf0, 0x0a, 0x86, 0xcf, 0xaa, 0x22, 0x0c, 0x0f, 0x36, 0x2c,
	0x35, 0x3e, 0x16, 0x64, 0x4f, 0x52, 0x18, 0x3e, 0xb4, 0x55, 0x83, 0x47, 0x43, 0xe3, 0x3f, 0x41,
	0xc2, 0x5b, 0x73, 0xfb, 0x19, 0xd7, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe4, 0xff, 0x46, 0x00,
	0x9f, 0x01, 0x00, 0x00,
}
